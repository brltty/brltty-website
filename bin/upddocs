#!/bin/bash
. "`dirname "${0}"`/prologue.sh"

defaultTargetRoot="home/doc"

addOption_websiteRoot
addOption_sourceRoot
addProgramOption t string.directory targetRoot "top-level of target hierarchy" "${defaultTargetRoot}"
parseProgramArguments "${@}"

checkOption_websiteRoot
checkOption_sourceRoot

[ -n "${targetRoot}" ] || targetRoot="${websiteRoot}/${defaultTargetRoot}"
verifyInputDirectory "${targetRoot}"
[ "${targetRoot#/}" != "${targetRoot}" ] || targetRoot="${websiteRoot}/${targetRoot}"

needTemporaryDirectory
documentSubdirectory="Documents"

cd "${sourceRoot}"
[ ! -f Makefile ] || make -s distclean
git checkout --quiet master
./autogen

buildRoot="${temporaryDirectory}/build"
mkdir "${buildRoot}"
cd "${buildRoot}"
"${sourceRoot}/configure" \
   --disable-gpm \
   --disable-x \
   \
   --without-libbraille \
   --disable-speech-support \
   --with-screen-driver=-all \
   \
   --without-service-package \
   --without-params-package \
   --without-mntpt-package \
   --without-mntfs-package \
   --without-kbd-package \
   --without-beep-package \
   --without-pcm-package \
   --without-midi-package \
   --without-fm-package \
   --without-serial-package \
   --without-usb-package \
   --without-bluetooth-package \
   --without-ports-package \
   \
   --quiet

relativePath() {
   local file="${1}"

   realpath --relative-to "${newTargetRoot}" "${file}"
}

declare -A fileMap
updateFile() {
   local source="${1}"
   local target="${newTargetRoot}/${2:-${source}}"

   mkdir -p "${target%/*}"
   cp -a -- "${source}" "${target}"
   fileMap["$(relativePath "${target}")"]="$(relativePath "${source}")"
}

updateDirectory() {
   local from="${1}"
   local to="${2}"
   shift 2

   local find=(find . -false)
   local pattern

   for pattern
   do
      find+=(-o -name "${pattern}")
   done

   cd "${from}"
   set -- $("${find[@]}")
   local file

   for file
   do
      updateFile "${file}" "${to}/${file}"
   done

   cd "${OLDPWD}"
}

newTargetRoot="${targetRoot}.${programName}.new"
rm -f -r "${newTargetRoot}"

cd "${sourceRoot}"
"./mkdocktb" -o "${newTargetRoot}/KeyBindings" -s . -b "${buildRoot}"

cd "${buildRoot}/${documentSubdirectory}"
make -s
updateDirectory "BrlAPIref/html" "BrlAPIref" "*.html" "*.png" "*.js" "*.css"

for root in "${buildRoot}" "${sourceRoot}"
do
   cd "${root}/${documentSubdirectory}"
   set -- Manual-*

   for manual
   do
      updateDirectory "${manual}" "${manual}" "*.sgml" "*.txt" "*.html" "*.htm" "*.pdf" "*.doc"
   done
done

cd "${sourceRoot}/${documentSubdirectory}"
for file in "../README" "ChangeLog" "TODO"
do
   updateFile "${file}" "${file##*/}.txt"
done

for file in "README."*
do
   updateFile "${file}" "${file##README.}.txt"
done

cd "${newTargetRoot}"
find . -type f -print |
   while read file
   do
      name="${file%.*}"
      extension="${file##*.}"

      case "${extension}"
      in
         txt)
            read <"${file}" line

            if [[ "${line}" =~ ^~+$ ]]
            then
               source="${newTargetRoot}/${fileMap["$(relativePath "${file}")"]}"
               rst2html --config "${sourceRoot}/docutils.conf" "${source}" "${name}.html"
            fi
            ;;

         *);;
      esac
   done

cd "${temporaryDirectory}"
oldTargetRoot="${targetRoot}.${programName}.old"
rm -f -r "${oldTargetRoot}"
mv "${targetRoot}" "${oldTargetRoot}"
mv "${newTargetRoot}" "${targetRoot}"
rm -f -r "${oldTargetRoot}"

exit 0
